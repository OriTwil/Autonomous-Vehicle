// Generated by gencpp from file car_msgs/DetectFinal.msg
// DO NOT EDIT!


#ifndef CAR_MSGS_MESSAGE_DETECTFINAL_H
#define CAR_MSGS_MESSAGE_DETECTFINAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace car_msgs
{
template <class ContainerAllocator>
struct DetectFinal_
{
  typedef DetectFinal_<ContainerAllocator> Type;

  DetectFinal_()
    : header()
    , barrels_x()
    , barrels_y()
    , barrels_z()
    , color()  {
      barrels_x.assign(0.0);

      barrels_y.assign(0.0);

      barrels_z.assign(0.0);

      color.assign(0);
  }
  DetectFinal_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , barrels_x()
    , barrels_y()
    , barrels_z()
    , color()  {
  (void)_alloc;
      barrels_x.assign(0.0);

      barrels_y.assign(0.0);

      barrels_z.assign(0.0);

      color.assign(0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef boost::array<float, 8>  _barrels_x_type;
  _barrels_x_type barrels_x;

   typedef boost::array<float, 8>  _barrels_y_type;
  _barrels_y_type barrels_y;

   typedef boost::array<float, 8>  _barrels_z_type;
  _barrels_z_type barrels_z;

   typedef boost::array<int8_t, 8>  _color_type;
  _color_type color;





  typedef boost::shared_ptr< ::car_msgs::DetectFinal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::car_msgs::DetectFinal_<ContainerAllocator> const> ConstPtr;

}; // struct DetectFinal_

typedef ::car_msgs::DetectFinal_<std::allocator<void> > DetectFinal;

typedef boost::shared_ptr< ::car_msgs::DetectFinal > DetectFinalPtr;
typedef boost::shared_ptr< ::car_msgs::DetectFinal const> DetectFinalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::car_msgs::DetectFinal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::car_msgs::DetectFinal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::car_msgs::DetectFinal_<ContainerAllocator1> & lhs, const ::car_msgs::DetectFinal_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.barrels_x == rhs.barrels_x &&
    lhs.barrels_y == rhs.barrels_y &&
    lhs.barrels_z == rhs.barrels_z &&
    lhs.color == rhs.color;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::car_msgs::DetectFinal_<ContainerAllocator1> & lhs, const ::car_msgs::DetectFinal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace car_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::car_msgs::DetectFinal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::car_msgs::DetectFinal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car_msgs::DetectFinal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car_msgs::DetectFinal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_msgs::DetectFinal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_msgs::DetectFinal_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::car_msgs::DetectFinal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4fd76da9078b59d2164edc8fa38c8dee";
  }

  static const char* value(const ::car_msgs::DetectFinal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4fd76da9078b59d2ULL;
  static const uint64_t static_value2 = 0x164edc8fa38c8deeULL;
};

template<class ContainerAllocator>
struct DataType< ::car_msgs::DetectFinal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "car_msgs/DetectFinal";
  }

  static const char* value(const ::car_msgs::DetectFinal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::car_msgs::DetectFinal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float32[8] barrels_x\n"
"float32[8] barrels_y\n"
"float32[8] barrels_z\n"
"int8[8] color\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::car_msgs::DetectFinal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::car_msgs::DetectFinal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.barrels_x);
      stream.next(m.barrels_y);
      stream.next(m.barrels_z);
      stream.next(m.color);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DetectFinal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::car_msgs::DetectFinal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::car_msgs::DetectFinal_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "barrels_x[]" << std::endl;
    for (size_t i = 0; i < v.barrels_x.size(); ++i)
    {
      s << indent << "  barrels_x[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.barrels_x[i]);
    }
    s << indent << "barrels_y[]" << std::endl;
    for (size_t i = 0; i < v.barrels_y.size(); ++i)
    {
      s << indent << "  barrels_y[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.barrels_y[i]);
    }
    s << indent << "barrels_z[]" << std::endl;
    for (size_t i = 0; i < v.barrels_z.size(); ++i)
    {
      s << indent << "  barrels_z[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.barrels_z[i]);
    }
    s << indent << "color[]" << std::endl;
    for (size_t i = 0; i < v.color.size(); ++i)
    {
      s << indent << "  color[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.color[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAR_MSGS_MESSAGE_DETECTFINAL_H
