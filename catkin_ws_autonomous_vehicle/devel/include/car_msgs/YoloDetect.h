// Generated by gencpp from file car_msgs/YoloDetect.msg
// DO NOT EDIT!


#ifndef CAR_MSGS_MESSAGE_YOLODETECT_H
#define CAR_MSGS_MESSAGE_YOLODETECT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace car_msgs
{
template <class ContainerAllocator>
struct YoloDetect_
{
  typedef YoloDetect_<ContainerAllocator> Type;

  YoloDetect_()
    : header()
    , left()
    , top()
    , width()
    , height()
    , ID()  {
      left.assign(0.0);

      top.assign(0.0);

      width.assign(0.0);

      height.assign(0.0);

      ID.assign(0.0);
  }
  YoloDetect_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , left()
    , top()
    , width()
    , height()
    , ID()  {
  (void)_alloc;
      left.assign(0.0);

      top.assign(0.0);

      width.assign(0.0);

      height.assign(0.0);

      ID.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef boost::array<float, 4>  _left_type;
  _left_type left;

   typedef boost::array<float, 4>  _top_type;
  _top_type top;

   typedef boost::array<float, 4>  _width_type;
  _width_type width;

   typedef boost::array<float, 4>  _height_type;
  _height_type height;

   typedef boost::array<float, 4>  _ID_type;
  _ID_type ID;





  typedef boost::shared_ptr< ::car_msgs::YoloDetect_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::car_msgs::YoloDetect_<ContainerAllocator> const> ConstPtr;

}; // struct YoloDetect_

typedef ::car_msgs::YoloDetect_<std::allocator<void> > YoloDetect;

typedef boost::shared_ptr< ::car_msgs::YoloDetect > YoloDetectPtr;
typedef boost::shared_ptr< ::car_msgs::YoloDetect const> YoloDetectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::car_msgs::YoloDetect_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::car_msgs::YoloDetect_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::car_msgs::YoloDetect_<ContainerAllocator1> & lhs, const ::car_msgs::YoloDetect_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.left == rhs.left &&
    lhs.top == rhs.top &&
    lhs.width == rhs.width &&
    lhs.height == rhs.height &&
    lhs.ID == rhs.ID;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::car_msgs::YoloDetect_<ContainerAllocator1> & lhs, const ::car_msgs::YoloDetect_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace car_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::car_msgs::YoloDetect_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::car_msgs::YoloDetect_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car_msgs::YoloDetect_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car_msgs::YoloDetect_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_msgs::YoloDetect_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_msgs::YoloDetect_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::car_msgs::YoloDetect_<ContainerAllocator> >
{
  static const char* value()
  {
    return "47e43372ff5d834c96206e6a1ba9ceea";
  }

  static const char* value(const ::car_msgs::YoloDetect_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x47e43372ff5d834cULL;
  static const uint64_t static_value2 = 0x96206e6a1ba9ceeaULL;
};

template<class ContainerAllocator>
struct DataType< ::car_msgs::YoloDetect_<ContainerAllocator> >
{
  static const char* value()
  {
    return "car_msgs/YoloDetect";
  }

  static const char* value(const ::car_msgs::YoloDetect_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::car_msgs::YoloDetect_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float32[4] left\n"
"float32[4] top\n"
"float32[4] width\n"
"float32[4] height\n"
"float32[4] ID\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::car_msgs::YoloDetect_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::car_msgs::YoloDetect_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.left);
      stream.next(m.top);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.ID);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct YoloDetect_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::car_msgs::YoloDetect_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::car_msgs::YoloDetect_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "left[]" << std::endl;
    for (size_t i = 0; i < v.left.size(); ++i)
    {
      s << indent << "  left[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.left[i]);
    }
    s << indent << "top[]" << std::endl;
    for (size_t i = 0; i < v.top.size(); ++i)
    {
      s << indent << "  top[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.top[i]);
    }
    s << indent << "width[]" << std::endl;
    for (size_t i = 0; i < v.width.size(); ++i)
    {
      s << indent << "  width[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.width[i]);
    }
    s << indent << "height[]" << std::endl;
    for (size_t i = 0; i < v.height.size(); ++i)
    {
      s << indent << "  height[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.height[i]);
    }
    s << indent << "ID[]" << std::endl;
    for (size_t i = 0; i < v.ID.size(); ++i)
    {
      s << indent << "  ID[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.ID[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAR_MSGS_MESSAGE_YOLODETECT_H
