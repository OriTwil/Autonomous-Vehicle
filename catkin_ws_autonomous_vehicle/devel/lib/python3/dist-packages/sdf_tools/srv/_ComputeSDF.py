# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sdf_tools/ComputeSDFRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ComputeSDFRequest(genpy.Message):
  _md5sum = "70082b15c0185876dcce41c4eb98be14"
  _type = "sdf_tools/ComputeSDFRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool request_new
"""
  __slots__ = ['request_new']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       request_new

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ComputeSDFRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.request_new is None:
        self.request_new = False
    else:
      self.request_new = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.request_new
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.request_new,) = _get_struct_B().unpack(str[start:end])
      self.request_new = bool(self.request_new)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.request_new
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.request_new,) = _get_struct_B().unpack(str[start:end])
      self.request_new = bool(self.request_new)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sdf_tools/ComputeSDFResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import sdf_tools.msg
import std_msgs.msg

class ComputeSDFResponse(genpy.Message):
  _md5sum = "fbf70ecbf2634799341a7255b0c416e3"
  _type = "sdf_tools/ComputeSDFResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool is_valid
sdf_tools/SDF sdf


================================================================================
MSG: sdf_tools/SDF
std_msgs/Header header
geometry_msgs/Transform origin_transform
geometry_msgs/Vector3 dimensions
float64 sdf_cell_size
float32 OOB_value
bool initialized
bool locked
uint8[] data

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['is_valid','sdf']
  _slot_types = ['bool','sdf_tools/SDF']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       is_valid,sdf

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ComputeSDFResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.is_valid is None:
        self.is_valid = False
      if self.sdf is None:
        self.sdf = sdf_tools.msg.SDF()
    else:
      self.is_valid = False
      self.sdf = sdf_tools.msg.SDF()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B3I().pack(_x.is_valid, _x.sdf.header.seq, _x.sdf.header.stamp.secs, _x.sdf.header.stamp.nsecs))
      _x = self.sdf.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_11df2B().pack(_x.sdf.origin_transform.translation.x, _x.sdf.origin_transform.translation.y, _x.sdf.origin_transform.translation.z, _x.sdf.origin_transform.rotation.x, _x.sdf.origin_transform.rotation.y, _x.sdf.origin_transform.rotation.z, _x.sdf.origin_transform.rotation.w, _x.sdf.dimensions.x, _x.sdf.dimensions.y, _x.sdf.dimensions.z, _x.sdf.sdf_cell_size, _x.sdf.OOB_value, _x.sdf.initialized, _x.sdf.locked))
      _x = self.sdf.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.sdf is None:
        self.sdf = sdf_tools.msg.SDF()
      end = 0
      _x = self
      start = end
      end += 13
      (_x.is_valid, _x.sdf.header.seq, _x.sdf.header.stamp.secs, _x.sdf.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      self.is_valid = bool(self.is_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.sdf.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.sdf.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 94
      (_x.sdf.origin_transform.translation.x, _x.sdf.origin_transform.translation.y, _x.sdf.origin_transform.translation.z, _x.sdf.origin_transform.rotation.x, _x.sdf.origin_transform.rotation.y, _x.sdf.origin_transform.rotation.z, _x.sdf.origin_transform.rotation.w, _x.sdf.dimensions.x, _x.sdf.dimensions.y, _x.sdf.dimensions.z, _x.sdf.sdf_cell_size, _x.sdf.OOB_value, _x.sdf.initialized, _x.sdf.locked,) = _get_struct_11df2B().unpack(str[start:end])
      self.sdf.initialized = bool(self.sdf.initialized)
      self.sdf.locked = bool(self.sdf.locked)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.sdf.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B3I().pack(_x.is_valid, _x.sdf.header.seq, _x.sdf.header.stamp.secs, _x.sdf.header.stamp.nsecs))
      _x = self.sdf.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_11df2B().pack(_x.sdf.origin_transform.translation.x, _x.sdf.origin_transform.translation.y, _x.sdf.origin_transform.translation.z, _x.sdf.origin_transform.rotation.x, _x.sdf.origin_transform.rotation.y, _x.sdf.origin_transform.rotation.z, _x.sdf.origin_transform.rotation.w, _x.sdf.dimensions.x, _x.sdf.dimensions.y, _x.sdf.dimensions.z, _x.sdf.sdf_cell_size, _x.sdf.OOB_value, _x.sdf.initialized, _x.sdf.locked))
      _x = self.sdf.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.sdf is None:
        self.sdf = sdf_tools.msg.SDF()
      end = 0
      _x = self
      start = end
      end += 13
      (_x.is_valid, _x.sdf.header.seq, _x.sdf.header.stamp.secs, _x.sdf.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      self.is_valid = bool(self.is_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.sdf.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.sdf.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 94
      (_x.sdf.origin_transform.translation.x, _x.sdf.origin_transform.translation.y, _x.sdf.origin_transform.translation.z, _x.sdf.origin_transform.rotation.x, _x.sdf.origin_transform.rotation.y, _x.sdf.origin_transform.rotation.z, _x.sdf.origin_transform.rotation.w, _x.sdf.dimensions.x, _x.sdf.dimensions.y, _x.sdf.dimensions.z, _x.sdf.sdf_cell_size, _x.sdf.OOB_value, _x.sdf.initialized, _x.sdf.locked,) = _get_struct_11df2B().unpack(str[start:end])
      self.sdf.initialized = bool(self.sdf.initialized)
      self.sdf.locked = bool(self.sdf.locked)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.sdf.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_11df2B = None
def _get_struct_11df2B():
    global _struct_11df2B
    if _struct_11df2B is None:
        _struct_11df2B = struct.Struct("<11df2B")
    return _struct_11df2B
_struct_B3I = None
def _get_struct_B3I():
    global _struct_B3I
    if _struct_B3I is None:
        _struct_B3I = struct.Struct("<B3I")
    return _struct_B3I
class ComputeSDF(object):
  _type          = 'sdf_tools/ComputeSDF'
  _md5sum = '567be5b04fd66c34e03a51193aff2d4a'
  _request_class  = ComputeSDFRequest
  _response_class = ComputeSDFResponse
